package br.furb.compiladores.analyzer.generated;

public interface ParserConstants
{
    int START_SYMBOL = 43;

    int FIRST_NON_TERMINAL    = 43;
    int FIRST_SEMANTIC_ACTION = 84;

    int[][] PARSER_TABLE =
    {
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  0, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1,  2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  2,  2, -1,  2, -1,  2,  1,  2,  2, -1, -1,  2,  2, -1,  2,  2, -1,  2, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  3, -1, -1, -1, -1,  3, -1, -1,  3, -1, -1, -1, -1, -1, -1,  3, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  4, -1, -1, -1, -1,  5, -1, -1,  6, -1, -1, -1, -1, -1, -1,  7, -1, -1, -1 },
        { -1,  8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1,  9, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10,  9, -1,  9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1 },
        { -1, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19, 20, -1, 20, -1, 19, -1, 20, 19, -1, -1, 20, 20, -1, 20, 19, -1, 19, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, 21, -1, -1, 21, -1, -1, -1, -1, -1, -1, 21, -1, 21, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, -1, -1, -1, 22, -1, -1, 22, -1, -1, -1, -1, -1, -1, 22, -1, 23, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 24, 25, -1, -1, -1, -1, 25, -1, -1, 25, -1, -1, -1, -1, -1, -1, 25, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 26, -1, -1, -1, -1, 26, -1, -1, 26, -1, -1, -1, -1, -1, -1, 26, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 28, -1, -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 29, -1, -1, -1, -1, 29, -1, -1, 29, -1, -1, -1, -1, -1, -1, 29, -1, -1, -1 },
        { -1, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 31, -1, 31, -1, -1, -1, 31, -1, 30, -1, 31, 31, 31, 31, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 32, -1, -1, -1, -1, -1, -1, -1, -1, -1, 33, -1, -1, -1, -1, -1 },
        { -1, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35, 34, 34, -1, -1, -1, 35, -1, -1, -1, 35, 35, 34, 35, -1, -1, -1, 34 },
        { -1, 36, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, -1, -1, -1, -1, -1, 39, -1, -1, -1, 38, 38, -1, 37, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, 41, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 43, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, 45, -1, -1, -1, -1, -1, -1 },
        { -1, 46, 46, 46, 46, 46, 46, -1, -1, -1, -1, -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1, -1, -1, -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 49, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 50, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 54, 54, 54, 54, 54, 54, -1, -1, -1, -1, -1, 54, -1, -1, -1, -1, -1, -1, -1, -1, 54, 53, -1, -1, -1, -1, 54, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 54, -1, -1 },
        { -1, 55, 55, 55, 55, 55, 55, -1, -1, -1, -1, -1, 55, -1, -1, -1, -1, -1, -1, -1, -1, 55, -1, -1, -1, -1, -1, 55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 55, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 58, 57, -1, -1, -1, -1, -1, -1, -1, 56, 56, -1, 56, -1, -1, -1, 56, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 59, 59, 59, 59, 59, 59, -1, -1, -1, -1, -1, 62, -1, -1, -1, -1, -1, -1, -1, -1, 59, -1, -1, -1, -1, -1, 61, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 60, -1, -1 },
        { -1, 63, 63, 63, 63, 63, 63, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 63, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 64, 64, -1, 65, 65, 65, 65, 65, 65, 64, 64, -1, 64, -1, -1, -1, 64, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 66, 67, 68, 69, 70, 71, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 72, 72, 72, 72, 72, 72, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 72, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, 74, 75, -1, -1, -1, 73, 73, -1, 73, 73, 73, 73, 73, 73, 73, 73, -1, 73, -1, -1, -1, 73, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 76, 76, 76, 76, 76, 76, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 76, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, 77, 77, 78, 79, -1, 77, 77, -1, 77, 77, 77, 77, 77, 77, 77, 77, -1, 77, -1, -1, -1, 77, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 80, 81, 82, 83, 85, 86, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 84, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, 87, 87, 87, 87, -1, 87, 87, -1, 87, 87, 87, 87, 87, 87, 87, 87, 88, 87, -1, -1, -1, 87, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }
    };

    int[][] PRODUCTIONS = 
    {
        {  99,  34,  44,  52,  61,  27, 100 },
        {  30,  45,  44 },
        {   0 },
        {  46, 108,  47, 110,  49,  21 },
        {  24 },
        {  29 },
        {  32 },
        {  39 },
        {   2, 109,  48 },
        {   0 },
        {  20,  47 },
        {   0 },
        {  10,  50, 114 },
        {   3 },
        {   4 },
        {   5 },
        {  51 },
        {  40 },
        {  28 },
        {  53,  52 },
        {   0 },
        {  54,   2,  22,  55,  23,  59,  61,  60,  27 },
        {  46 },
        {  41 },
        {   0 },
        {  56 },
        {  58,  57 },
        {   0 },
        {  20,  56 },
        {  46,   2 },
        {  33,  45,  59 },
        {   0 },
        {   0 },
        {  37,  72 },
        {   0 },
        {  62,  61 },
        {   2, 109,  63 },
        {  64 },
        {  65 },
        {  68 },
        {  70 },
        {  10,  72, 113,  21 },
        {  22,  71,  23,  21 },
        {  38,  22,  47, 111,  23,  21 },
        {  35,  22,  66,  23,  21 },
        {  36,  22,  66, 101,  23,  21 },
        {  72,  98,  67 },
        {   0 },
        {  20,  66 },
        {  31,  22,  72,  23, 115,  61,  69,  27, 116,  21 },
        {  26, 117,  61 },
        {   0 },
        {  25, 118,  61,  42,  22,  72,  23, 119,  21 },
        {   0 },
        {  66 },
        {  74,  73 },
        {   0 },
        {  12,  74, 102,  73 },
        {  11,  74, 103,  73 },
        {  75 },
        {  40,  95 },
        {  28,  96 },
        {  13,  74,  97 },
        {  78,  76 },
        {   0 },
        {  77, 104,  78, 105 },
        {  14 },
        {  15 },
        {  16 },
        {  17 },
        {  18 },
        {  19 },
        {  80,  79 },
        {   0 },
        {   6,  80,  85,  79 },
        {   7,  80,  86,  79 },
        {  82,  81 },
        {   0 },
        {   8,  82,  87,  81 },
        {   9,  82,  88,  81 },
        {   2, 112,  83 },
        {   3,  89 },
        {   4,  90 },
        {   5, 106 },
        {  22,  72,  23 },
        {   6,  82, 107 },
        {   7,  82,  91 },
        {   0 },
        {  22,  66,  23 }
    };

    String[] PARSER_ERROR =
    {
        "",
        //"Era esperado fim de programa",
        "esperado fim de programa",
        //"Era esperado identificador",
        "esperado identificador",
        //"Era esperado cte_inteiro",
        "esperado inteiro",
        //"Era esperado cte_float",
        "esperado float",
        //"Era esperado cte_literal",
        "esperado literal",
        //"Era esperado \"+\"",
        "esperado \"+\"",
        //"Era esperado \"-\"",
        "esperado \"-\"",
        //"Era esperado \"*\"",
        "esperado \"*\"",
        //"Era esperado \"/\"",
        "esperado \"/\"",
        //"Era esperado \"=\"",
        "esperado \"=\"",
        //"Era esperado \"&&\"",
        "esperado \"&&\"",
        //"Era esperado \"||\"",
        "esperado \"||\"",
        //"Era esperado \"!\"",
        "esperado \"!\"",
        //"Era esperado \"==\"",
        "esperado \"==\"",
        //"Era esperado \"!=\"",
        "esperado \"!=\"",
        //"Era esperado \"<\"",
        "esperado \"<\"",
        //"Era esperado \"<=\"",
        "esperado \"<=\"",
        //"Era esperado \">\"",
        "esperado \">\"",
        //"Era esperado \">=\"",
        "esperado \">=\"",
        //"Era esperado \",\"",
        "esperado \",\"",
        //"Era esperado \";\"",
        "esperado \";\"",
        //"Era esperado \"(\"",
        "esperado \"(\"",
        //"Era esperado \")\"",
        "esperado \")\"",
        //"Era esperado pr_boolean",
        "esperado boolean",
        //"Era esperado pr_do",
        "esperado do",
        //"Era esperado pr_else",
        "esperado else",
        //"Era esperado pr_end",
        "esperado end",
        //"Era esperado pr_false",
        "esperado false",
        //"Era esperado pr_float",
        "esperado float",
        //"Era esperado pr_global",
        "esperado global",
        //"Era esperado pr_if",
        "esperado if",
        //"Era esperado pr_integer",
        "esperado integer",
        //"Era esperado pr_local",
        "esperado local",
        //"Era esperado pr_main",
        "esperado main",
        //"Era esperado pr_print",
        "esperado print",
        //"Era esperado pr_println",
        "esperado println",
        //"Era esperado pr_return",
        "esperado return",
        //"Era esperado pr_scan",
        "esperado scan",
        //"Era esperado pr_string",
        "esperado string",
        //"Era esperado pr_true",
        "esperado true",
        //"Era esperado pr_void",
        "esperado void",
        //"Era esperado pr_while",
        "esperado while",
        
        // <--- NÃO-TERMINAIS ---
        //"<programa> inválido",
        "esperado main",
        //"<variaveis_globais> inválido",
        "esperado identificador, boolean, do, end, float, global, if, integer, print, println, scan, string, void",
        //"<variaveis> inválido",
        "esperado boolean, float, integer, string",
        //"<tipo> inválido",
        "esperado boolean, float, integer, string",
        //"<lista_id> inválido",
        "esperado identificador",
        //"<lista_id_1> inválido",
        "esperado =, \",\", ;, )",
        //"<opt_valor> inválido",
        "esperado =, ;",
        //"<valor> inválido",
        "esperado inteiro, float, literal, FALSE, TRUE",
        //"<cte_logica> inválido",
        "esperado FALSE, TRUE",
        //"<lista_modulos> inválido",
        "esperado identificador, boolean, do, end, float, if, integer, print, println, scan, string, void",
        //"<modulo> inválido",
        "esperado boolean, float, integer, string, void",
        //"<tipo_modulo> inválido",
        "esperado boolean, float, integer, string, void",
        //"<opt_lista_params> inválido",
        "esperado ), boolean, float, integer, string",
        //"<lista_params> inválido",
        "esperado boolean, float, integer, string",
        //"<lista_params_1> inválido",
        "esperado \",\", )",
        //"<param> inválido",
        "esperado boolean, float, integer, string",
        //"<variaveis_locais> inválido",
        "esperado identificador, do, end, if, local, print, println, return, scan",
        //"<retorno> inválido",
        "esperado end, return",
        //"<lista_cmds> inválido",
        "esperado identificador, do, else, end, if, print, println, return, scan, while",
        //"<cmd> inválido",
        "esperado identificador, do, if, print, println, scan",
        //"<cmd_1> inválido",
        "esperado =, (",
        //"<cmd_entrada> inválido",
        "esperado scan",
        //"<cmd_saida> inválido",
        "esperado print, println",
        // --- NÃO-TERMINAIS --->
        
        // <--- EXPRESSÕES ---
        //"<lista_expressoes> inválido",
        "esperado expressão",
        //"<lista_expressoes_1> inválido",
        "esperado expressão",
        //"<cmd_selecao> inválido",
        "esperado expressão",
        //"<cmd_selecao_else> inválido",
        "esperado expressão",
        //"<cmd_repeticao> inválido",
        "esperado expressão",
        //"<params_reais> inválido",
        "esperado expressão",
        //"<expressao> inválido",
        "esperado expressão",
        //"<expressao_1> inválido",
        "esperado expressão",
        //"<elemento> inválido",
        "esperado expressão",
        //"<relacional> inválido",
        "esperado expressão",
        //"<relacional_1> inválido",
        "esperado expressão",
        //"<operador_relacional> inválido",
        "esperado expressão",
        //"<aritmetica> inválido",
        "esperado expressão",
        //"<aritmetica_1> inválido",
        "esperado expressão",
        //"<termo> inválido",
        "esperado expressão",
        //"<termo_1> inválido",
        "esperado expressão",
        //"<fator> inválido",
        "esperado expressão",
        //"<fator_1> inválido"
        "esperado expressão"
        // --- EXPRESSÕES --->
    };
}
